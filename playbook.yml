- name: Create environment to deploy an ELB and EC2 machines from scratch
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yaml

  tasks:
  - name: Create VPC "{{ vpc.name }}" in region {{ region }}
    ec2_vpc_net:
      name: "{{ vpc.name }}"
      cidr_block: "{{ vpc.cidr_block }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      tenancy: default
    register: __vpc_info

  - name: Create internet gateway "{{ igw.name }}"
    ec2_vpc_igw:
      vpc_id: "{{ __vpc_info.vpc.id }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      tags:
        Name: "{{ igw.name }}"
      state: present
    register: __igw_info

  - name: Create subnet {{ subnet1.name }}
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ __vpc_info.vpc.id }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      cidr: "{{ subnet1.cidr }}"
      az: "{{ subnet1.az }}"
      tags:
        Name: "{{ subnet1.name }}"
    register: __subnet1_info

  - name: Create subnet {{ subnet2.name }}
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ __vpc_info.vpc.id }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      cidr: "{{ subnet2.cidr }}"
      az: "{{ subnet2.az }}"
      tags:
        Name: "{{ subnet2.name }}"
    register: __subnet2_info

  - name: Get route table info of {{ __vpc_info.vpc.id }}
    ec2_vpc_route_table_info:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      filters:
        vpc-id: "{{ __vpc_info.vpc.id }}"
    register: __route_table_info

  - name: Set up public subnet route table "{{ __route_table_info.route_tables[0].id }}"
    ec2_vpc_route_table:
      route_table_id: "{{ __route_table_info.route_tables[0].id }}"
      vpc_id: "{{ __vpc_info.vpc.id }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      lookup: id
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ __igw_info.gateway_id }}"
    register: __route_table_info

  - name: Create security group {{ security_group.name }}
    ec2_group:
      name: "{{ security_group.name }}"
      description: "{{ security_group.description }}"
      region: "{{ region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ __vpc_info.vpc.id }}"
      rules:
        - proto: tcp
          ports:
            - 22
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on ssh port
        - proto: tcp
          ports:
            - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on http port
      tags:
        Name: "{{ security_group.name }}"
    register: __security_group

  - name: Get ec2-{{ subnet1.name }} machine info
    ec2_instance_info:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      filters:
        "tag:Name": ec2-{{ subnet1.name }}
        instance-state-name: ['running','stopped']
    register: __ec2_subnet1_info

  - name:  Get ec2-{{ subnet2.name }} machine info
    ec2_instance_info:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      filters:
        "tag:Name": ec2-{{ subnet2.name }}
        instance-state-name: ['running','stopped']
    register: __ec2_subnet2_info

  - name: Deploy ec2 machine on {{ subnet1.name }}
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      key_name: "{{ key_name }}"
      group_id: "{{ __security_group.group_id }}"
      image: "{{ ec2.subnet_1.image }}"
      instance_type: "{{ ec2.subnet_1.instance_type }}"
      wait: true
      instance_tags:
        type: ec2instance
        Name: ec2-{{ subnet1.name }}
      vpc_subnet_id: "{{ __subnet1_info.subnet.id }}"
      assign_public_ip: yes
    register: __ec2_subnet1
    when: __ec2_subnet1_info.instances | length == 0

  - name: Deploy ec2 machine on {{ subnet2.name }}
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      key_name: "{{ key_name }}"
      group_id: "{{ __security_group.group_id }}"
      image: "{{ ec2.subnet_2.image }}"
      instance_type: "{{ ec2.subnet_2.instance_type }}"
      wait: true
      instance_tags:
        type: ec2instance
        Name: ec2-{{ subnet2.name }}
      vpc_subnet_id: "{{ __subnet2_info.subnet.id }}"
      assign_public_ip: yes
    register: __ec2_subnet2
    when: __ec2_subnet2_info.instances | length == 0

  - name: Wait for SSH to come up ec2-{{ subnet1.name }}
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      delay: 30
      timeout: 185
    with_items: "{{ __ec2_subnet1.instances }}"
    when: "__ec2_subnet1.instances is defined"

  - name: Wait for SSH to come up ec2-{{ subnet2.name }}
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      delay: 30
      timeout: 185
    with_items: "{{ __ec2_subnet2.instances }}"
    when: "__ec2_subnet2.instances is defined"

  - name:  Get ec2 machines info
    ec2_instance_info:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      filters:
        "tag:Name":
          - ec2-{{ subnet2.name }}
          - ec2-{{ subnet1.name }}
        instance-state-name: ['running','stopped']
    register: __ec2_machines_info

  - name: Create target group {{ target_group.name }}
    elb_target_group:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      name: "{{ target_group.name }}"
      protocol: "{{ target_group.protocol }}"
      port: "{{ target_group.port }}"
      vpc_id: "{{ __vpc_info.vpc.id }}"
      state: "{{ target_group.state }}"
    register: __target_group

  - name: Add targets to target group {{ __target_group.target_group_name }}
    elb_target:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      target_group_name: "{{ __target_group.target_group_name }}"
      target_id: "{{ item.instance_id }}"
      state: "{{ target_group.state }}"
    with_items: "{{ __ec2_machines_info.instances }}"

  - name: Create load balancer
    elb_application_lb:
      name: "{{ elb.name }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      state: "{{ elb.state }}"
      wait: true
      security_groups:
        - "{{ __security_group.group_id }}"
      subnets:
        - "{{ __subnet1_info.subnet.id }}"
        - "{{ __subnet2_info.subnet.id }}"
      listeners:
        - Protocol: "{{ elb.protocol }}"
          Port: "{{ elb.port }}"
          DefaultActions:
            - Type: "{{ elb.type }}"
              TargetGroupName: "{{ __target_group.target_group_name }}"
    register: __elb

  - name: Refresh inventory to ensure new instances exist in inventory
    meta: refresh_inventory